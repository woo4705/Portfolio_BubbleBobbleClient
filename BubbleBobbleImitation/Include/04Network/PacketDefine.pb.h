// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketDefine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PacketDefine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PacketDefine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PacketDefine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PacketDefine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PacketDefine_2eproto;
class GameStartNotifyPacket;
class GameStartNotifyPacketDefaultTypeInternal;
extern GameStartNotifyPacketDefaultTypeInternal _GameStartNotifyPacket_default_instance_;
class GameStartRequestPacket;
class GameStartRequestPacketDefaultTypeInternal;
extern GameStartRequestPacketDefaultTypeInternal _GameStartRequestPacket_default_instance_;
class GameStartResultPacket;
class GameStartResultPacketDefaultTypeInternal;
extern GameStartResultPacketDefaultTypeInternal _GameStartResultPacket_default_instance_;
class GameSyncRequestPacket;
class GameSyncRequestPacketDefaultTypeInternal;
extern GameSyncRequestPacketDefaultTypeInternal _GameSyncRequestPacket_default_instance_;
class ObjectEventRecord;
class ObjectEventRecordDefaultTypeInternal;
extern ObjectEventRecordDefaultTypeInternal _ObjectEventRecord_default_instance_;
class ObjectSyncData;
class ObjectSyncDataDefaultTypeInternal;
extern ObjectSyncDataDefaultTypeInternal _ObjectSyncData_default_instance_;
class PacketHeader;
class PacketHeaderDefaultTypeInternal;
extern PacketHeaderDefaultTypeInternal _PacketHeader_default_instance_;
class WorldSyncPacket;
class WorldSyncPacketDefaultTypeInternal;
extern WorldSyncPacketDefaultTypeInternal _WorldSyncPacket_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GameStartNotifyPacket* Arena::CreateMaybeMessage<::GameStartNotifyPacket>(Arena*);
template<> ::GameStartRequestPacket* Arena::CreateMaybeMessage<::GameStartRequestPacket>(Arena*);
template<> ::GameStartResultPacket* Arena::CreateMaybeMessage<::GameStartResultPacket>(Arena*);
template<> ::GameSyncRequestPacket* Arena::CreateMaybeMessage<::GameSyncRequestPacket>(Arena*);
template<> ::ObjectEventRecord* Arena::CreateMaybeMessage<::ObjectEventRecord>(Arena*);
template<> ::ObjectSyncData* Arena::CreateMaybeMessage<::ObjectSyncData>(Arena*);
template<> ::PacketHeader* Arena::CreateMaybeMessage<::PacketHeader>(Arena*);
template<> ::WorldSyncPacket* Arena::CreateMaybeMessage<::WorldSyncPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ObjectEventRecord_EventType : int {
  ObjectEventRecord_EventType_Move_UP = 0,
  ObjectEventRecord_EventType_Move_Down = 1,
  ObjectEventRecord_EventType_Move_Left = 2,
  ObjectEventRecord_EventType_Move_Right = 3,
  ObjectEventRecord_EventType_Die = 4,
  ObjectEventRecord_EventType_FireAttack = 5,
  ObjectEventRecord_EventType_Captured = 6,
 // ObjectEventRecord_EventType_ObjectEventRecord_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
 // ObjectEventRecord_EventType_ObjectEventRecord_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ObjectEventRecord_EventType_IsValid(int value);
constexpr ObjectEventRecord_EventType ObjectEventRecord_EventType_EventType_MIN = ObjectEventRecord_EventType_Move_UP;
constexpr ObjectEventRecord_EventType ObjectEventRecord_EventType_EventType_MAX = ObjectEventRecord_EventType_Captured;
constexpr int ObjectEventRecord_EventType_EventType_ARRAYSIZE = ObjectEventRecord_EventType_EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectEventRecord_EventType_descriptor();
template<typename T>
inline const std::string& ObjectEventRecord_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectEventRecord_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectEventRecord_EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectEventRecord_EventType_descriptor(), enum_t_value);
}
inline bool ObjectEventRecord_EventType_Parse(
    const std::string& name, ObjectEventRecord_EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectEventRecord_EventType>(
    ObjectEventRecord_EventType_descriptor(), name, value);
}
// ===================================================================

class PacketHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PacketHeader) */ {
 public:
  PacketHeader();
  virtual ~PacketHeader();

  PacketHeader(const PacketHeader& from);
  PacketHeader(PacketHeader&& from) noexcept
    : PacketHeader() {
    *this = ::std::move(from);
  }

  inline PacketHeader& operator=(const PacketHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketHeader& operator=(PacketHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PacketHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PacketHeader* internal_default_instance() {
    return reinterpret_cast<const PacketHeader*>(
               &_PacketHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PacketHeader& a, PacketHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketHeader* New() const final {
    return CreateMaybeMessage<PacketHeader>(nullptr);
  }

  PacketHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketHeader& from);
  void MergeFrom(const PacketHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PacketHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PacketDefine_2eproto);
    return ::descriptor_table_PacketDefine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketIDFieldNumber = 1,
  };
  // int32 packetID = 1;
  void clear_packetid();
  ::PROTOBUF_NAMESPACE_ID::int32 packetid() const;
  void set_packetid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:PacketHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 packetid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketDefine_2eproto;
};
// -------------------------------------------------------------------

class GameStartRequestPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameStartRequestPacket) */ {
 public:
  GameStartRequestPacket();
  virtual ~GameStartRequestPacket();

  GameStartRequestPacket(const GameStartRequestPacket& from);
  GameStartRequestPacket(GameStartRequestPacket&& from) noexcept
    : GameStartRequestPacket() {
    *this = ::std::move(from);
  }

  inline GameStartRequestPacket& operator=(const GameStartRequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStartRequestPacket& operator=(GameStartRequestPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameStartRequestPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStartRequestPacket* internal_default_instance() {
    return reinterpret_cast<const GameStartRequestPacket*>(
               &_GameStartRequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameStartRequestPacket& a, GameStartRequestPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStartRequestPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameStartRequestPacket* New() const final {
    return CreateMaybeMessage<GameStartRequestPacket>(nullptr);
  }

  GameStartRequestPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameStartRequestPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameStartRequestPacket& from);
  void MergeFrom(const GameStartRequestPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStartRequestPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameStartRequestPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PacketDefine_2eproto);
    return ::descriptor_table_PacketDefine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketHeaderFieldNumber = 1,
  };
  // .PacketHeader packetHeader = 1;
  bool has_packetheader() const;
  void clear_packetheader();
  const ::PacketHeader& packetheader() const;
  ::PacketHeader* release_packetheader();
  ::PacketHeader* mutable_packetheader();
  void set_allocated_packetheader(::PacketHeader* packetheader);

  // @@protoc_insertion_point(class_scope:GameStartRequestPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PacketHeader* packetheader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketDefine_2eproto;
};
// -------------------------------------------------------------------

class GameStartResultPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameStartResultPacket) */ {
 public:
  GameStartResultPacket();
  virtual ~GameStartResultPacket();

  GameStartResultPacket(const GameStartResultPacket& from);
  GameStartResultPacket(GameStartResultPacket&& from) noexcept
    : GameStartResultPacket() {
    *this = ::std::move(from);
  }

  inline GameStartResultPacket& operator=(const GameStartResultPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStartResultPacket& operator=(GameStartResultPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameStartResultPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStartResultPacket* internal_default_instance() {
    return reinterpret_cast<const GameStartResultPacket*>(
               &_GameStartResultPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GameStartResultPacket& a, GameStartResultPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStartResultPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameStartResultPacket* New() const final {
    return CreateMaybeMessage<GameStartResultPacket>(nullptr);
  }

  GameStartResultPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameStartResultPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameStartResultPacket& from);
  void MergeFrom(const GameStartResultPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStartResultPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameStartResultPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PacketDefine_2eproto);
    return ::descriptor_table_PacketDefine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketHeaderFieldNumber = 1,
  };
  // .PacketHeader packetHeader = 1;
  bool has_packetheader() const;
  void clear_packetheader();
  const ::PacketHeader& packetheader() const;
  ::PacketHeader* release_packetheader();
  ::PacketHeader* mutable_packetheader();
  void set_allocated_packetheader(::PacketHeader* packetheader);

  // @@protoc_insertion_point(class_scope:GameStartResultPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PacketHeader* packetheader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketDefine_2eproto;
};
// -------------------------------------------------------------------

class GameStartNotifyPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameStartNotifyPacket) */ {
 public:
  GameStartNotifyPacket();
  virtual ~GameStartNotifyPacket();

  GameStartNotifyPacket(const GameStartNotifyPacket& from);
  GameStartNotifyPacket(GameStartNotifyPacket&& from) noexcept
    : GameStartNotifyPacket() {
    *this = ::std::move(from);
  }

  inline GameStartNotifyPacket& operator=(const GameStartNotifyPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameStartNotifyPacket& operator=(GameStartNotifyPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameStartNotifyPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameStartNotifyPacket* internal_default_instance() {
    return reinterpret_cast<const GameStartNotifyPacket*>(
               &_GameStartNotifyPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameStartNotifyPacket& a, GameStartNotifyPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GameStartNotifyPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameStartNotifyPacket* New() const final {
    return CreateMaybeMessage<GameStartNotifyPacket>(nullptr);
  }

  GameStartNotifyPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameStartNotifyPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameStartNotifyPacket& from);
  void MergeFrom(const GameStartNotifyPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameStartNotifyPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameStartNotifyPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PacketDefine_2eproto);
    return ::descriptor_table_PacketDefine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketHeaderFieldNumber = 1,
    kPlayerIDFieldNumber = 2,
  };
  // .PacketHeader packetHeader = 1;
  bool has_packetheader() const;
  void clear_packetheader();
  const ::PacketHeader& packetheader() const;
  ::PacketHeader* release_packetheader();
  ::PacketHeader* mutable_packetheader();
  void set_allocated_packetheader(::PacketHeader* packetheader);

  // int32 PlayerID = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:GameStartNotifyPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PacketHeader* packetheader_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketDefine_2eproto;
};
// -------------------------------------------------------------------

class ObjectEventRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ObjectEventRecord) */ {
 public:
  ObjectEventRecord();
  virtual ~ObjectEventRecord();

  ObjectEventRecord(const ObjectEventRecord& from);
  ObjectEventRecord(ObjectEventRecord&& from) noexcept
    : ObjectEventRecord() {
    *this = ::std::move(from);
  }

  inline ObjectEventRecord& operator=(const ObjectEventRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectEventRecord& operator=(ObjectEventRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectEventRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectEventRecord* internal_default_instance() {
    return reinterpret_cast<const ObjectEventRecord*>(
               &_ObjectEventRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ObjectEventRecord& a, ObjectEventRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectEventRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectEventRecord* New() const final {
    return CreateMaybeMessage<ObjectEventRecord>(nullptr);
  }

  ObjectEventRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectEventRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectEventRecord& from);
  void MergeFrom(const ObjectEventRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectEventRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ObjectEventRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PacketDefine_2eproto);
    return ::descriptor_table_PacketDefine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ObjectEventRecord_EventType EventType;
  static constexpr EventType Move_UP =
    ObjectEventRecord_EventType_Move_UP;
  static constexpr EventType Move_Down =
    ObjectEventRecord_EventType_Move_Down;
  static constexpr EventType Move_Left =
    ObjectEventRecord_EventType_Move_Left;
  static constexpr EventType Move_Right =
    ObjectEventRecord_EventType_Move_Right;
  static constexpr EventType Die =
    ObjectEventRecord_EventType_Die;
  static constexpr EventType FireAttack =
    ObjectEventRecord_EventType_FireAttack;
  static constexpr EventType Captured =
    ObjectEventRecord_EventType_Captured;
  static inline bool EventType_IsValid(int value) {
    return ObjectEventRecord_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    ObjectEventRecord_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    ObjectEventRecord_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    ObjectEventRecord_EventType_EventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventType_descriptor() {
    return ObjectEventRecord_EventType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return ObjectEventRecord_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(const std::string& name,
      EventType* value) {
    return ObjectEventRecord_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEventTypeCodeFieldNumber = 1,
    kEventOccuredTimeFieldNumber = 2,
  };
  // .ObjectEventRecord.EventType eventTypeCode = 1;
  void clear_eventtypecode();
  ::ObjectEventRecord_EventType eventtypecode() const;
  void set_eventtypecode(::ObjectEventRecord_EventType value);

  // float eventOccuredTime = 2;
  void clear_eventoccuredtime();
  float eventoccuredtime() const;
  void set_eventoccuredtime(float value);

  // @@protoc_insertion_point(class_scope:ObjectEventRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int eventtypecode_;
  float eventoccuredtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketDefine_2eproto;
};
// -------------------------------------------------------------------

class GameSyncRequestPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameSyncRequestPacket) */ {
 public:
  GameSyncRequestPacket();
  virtual ~GameSyncRequestPacket();

  GameSyncRequestPacket(const GameSyncRequestPacket& from);
  GameSyncRequestPacket(GameSyncRequestPacket&& from) noexcept
    : GameSyncRequestPacket() {
    *this = ::std::move(from);
  }

  inline GameSyncRequestPacket& operator=(const GameSyncRequestPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameSyncRequestPacket& operator=(GameSyncRequestPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameSyncRequestPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameSyncRequestPacket* internal_default_instance() {
    return reinterpret_cast<const GameSyncRequestPacket*>(
               &_GameSyncRequestPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameSyncRequestPacket& a, GameSyncRequestPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(GameSyncRequestPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameSyncRequestPacket* New() const final {
    return CreateMaybeMessage<GameSyncRequestPacket>(nullptr);
  }

  GameSyncRequestPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameSyncRequestPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameSyncRequestPacket& from);
  void MergeFrom(const GameSyncRequestPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameSyncRequestPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameSyncRequestPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PacketDefine_2eproto);
    return ::descriptor_table_PacketDefine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventRecordListFieldNumber = 4,
    kPacketHeaderFieldNumber = 1,
    kPlayerIDFieldNumber = 2,
  };
  // repeated .ObjectEventRecord eventRecordList = 4;
  int eventrecordlist_size() const;
  void clear_eventrecordlist();
  ::ObjectEventRecord* mutable_eventrecordlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectEventRecord >*
      mutable_eventrecordlist();
  const ::ObjectEventRecord& eventrecordlist(int index) const;
  ::ObjectEventRecord* add_eventrecordlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectEventRecord >&
      eventrecordlist() const;

  // .PacketHeader packetHeader = 1;
  bool has_packetheader() const;
  void clear_packetheader();
  const ::PacketHeader& packetheader() const;
  ::PacketHeader* release_packetheader();
  ::PacketHeader* mutable_packetheader();
  void set_allocated_packetheader(::PacketHeader* packetheader);

  // int32 playerID = 2;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:GameSyncRequestPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectEventRecord > eventrecordlist_;
  ::PacketHeader* packetheader_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketDefine_2eproto;
};
// -------------------------------------------------------------------

class ObjectSyncData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ObjectSyncData) */ {
 public:
  ObjectSyncData();
  virtual ~ObjectSyncData();

  ObjectSyncData(const ObjectSyncData& from);
  ObjectSyncData(ObjectSyncData&& from) noexcept
    : ObjectSyncData() {
    *this = ::std::move(from);
  }

  inline ObjectSyncData& operator=(const ObjectSyncData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectSyncData& operator=(ObjectSyncData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectSyncData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectSyncData* internal_default_instance() {
    return reinterpret_cast<const ObjectSyncData*>(
               &_ObjectSyncData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ObjectSyncData& a, ObjectSyncData& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectSyncData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectSyncData* New() const final {
    return CreateMaybeMessage<ObjectSyncData>(nullptr);
  }

  ObjectSyncData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectSyncData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectSyncData& from);
  void MergeFrom(const ObjectSyncData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectSyncData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ObjectSyncData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PacketDefine_2eproto);
    return ::descriptor_table_PacketDefine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventRecordListFieldNumber = 4,
    kObjectIDFieldNumber = 1,
    kXPosFieldNumber = 2,
    kYPosFieldNumber = 3,
  };
  // repeated .ObjectEventRecord eventRecordList = 4;
  int eventrecordlist_size() const;
  void clear_eventrecordlist();
  ::ObjectEventRecord* mutable_eventrecordlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectEventRecord >*
      mutable_eventrecordlist();
  const ::ObjectEventRecord& eventrecordlist(int index) const;
  ::ObjectEventRecord* add_eventrecordlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectEventRecord >&
      eventrecordlist() const;

  // int32 objectID = 1;
  void clear_objectid();
  ::PROTOBUF_NAMESPACE_ID::int32 objectid() const;
  void set_objectid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float xPos = 2;
  void clear_xpos();
  float xpos() const;
  void set_xpos(float value);

  // float yPos = 3;
  void clear_ypos();
  float ypos() const;
  void set_ypos(float value);

  // @@protoc_insertion_point(class_scope:ObjectSyncData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectEventRecord > eventrecordlist_;
  ::PROTOBUF_NAMESPACE_ID::int32 objectid_;
  float xpos_;
  float ypos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketDefine_2eproto;
};
// -------------------------------------------------------------------

class WorldSyncPacket :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldSyncPacket) */ {
 public:
  WorldSyncPacket();
  virtual ~WorldSyncPacket();

  WorldSyncPacket(const WorldSyncPacket& from);
  WorldSyncPacket(WorldSyncPacket&& from) noexcept
    : WorldSyncPacket() {
    *this = ::std::move(from);
  }

  inline WorldSyncPacket& operator=(const WorldSyncPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldSyncPacket& operator=(WorldSyncPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldSyncPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldSyncPacket* internal_default_instance() {
    return reinterpret_cast<const WorldSyncPacket*>(
               &_WorldSyncPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WorldSyncPacket& a, WorldSyncPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldSyncPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldSyncPacket* New() const final {
    return CreateMaybeMessage<WorldSyncPacket>(nullptr);
  }

  WorldSyncPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldSyncPacket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldSyncPacket& from);
  void MergeFrom(const WorldSyncPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldSyncPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorldSyncPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_PacketDefine_2eproto);
    return ::descriptor_table_PacketDefine_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjSyncDataListFieldNumber = 2,
    kPacketHeaderFieldNumber = 1,
  };
  // repeated .ObjectSyncData objSyncDataList = 2;
  int objsyncdatalist_size() const;
  void clear_objsyncdatalist();
  ::ObjectSyncData* mutable_objsyncdatalist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectSyncData >*
      mutable_objsyncdatalist();
  const ::ObjectSyncData& objsyncdatalist(int index) const;
  ::ObjectSyncData* add_objsyncdatalist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectSyncData >&
      objsyncdatalist() const;

  // .PacketHeader packetHeader = 1;
  bool has_packetheader() const;
  void clear_packetheader();
  const ::PacketHeader& packetheader() const;
  ::PacketHeader* release_packetheader();
  ::PacketHeader* mutable_packetheader();
  void set_allocated_packetheader(::PacketHeader* packetheader);

  // @@protoc_insertion_point(class_scope:WorldSyncPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectSyncData > objsyncdatalist_;
  ::PacketHeader* packetheader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_PacketDefine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PacketHeader

// int32 packetID = 1;
inline void PacketHeader::clear_packetid() {
  packetid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PacketHeader::packetid() const {
  // @@protoc_insertion_point(field_get:PacketHeader.packetID)
  return packetid_;
}
inline void PacketHeader::set_packetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  packetid_ = value;
  // @@protoc_insertion_point(field_set:PacketHeader.packetID)
}

// -------------------------------------------------------------------

// GameStartRequestPacket

// .PacketHeader packetHeader = 1;
inline bool GameStartRequestPacket::has_packetheader() const {
  return this != internal_default_instance() && packetheader_ != nullptr;
}
inline void GameStartRequestPacket::clear_packetheader() {
  if (GetArenaNoVirtual() == nullptr && packetheader_ != nullptr) {
    delete packetheader_;
  }
  packetheader_ = nullptr;
}
inline const ::PacketHeader& GameStartRequestPacket::packetheader() const {
  const ::PacketHeader* p = packetheader_;
  // @@protoc_insertion_point(field_get:GameStartRequestPacket.packetHeader)
  return p != nullptr ? *p : *reinterpret_cast<const ::PacketHeader*>(
      &::_PacketHeader_default_instance_);
}
inline ::PacketHeader* GameStartRequestPacket::release_packetheader() {
  // @@protoc_insertion_point(field_release:GameStartRequestPacket.packetHeader)
  
  ::PacketHeader* temp = packetheader_;
  packetheader_ = nullptr;
  return temp;
}
inline ::PacketHeader* GameStartRequestPacket::mutable_packetheader() {
  
  if (packetheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::PacketHeader>(GetArenaNoVirtual());
    packetheader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GameStartRequestPacket.packetHeader)
  return packetheader_;
}
inline void GameStartRequestPacket::set_allocated_packetheader(::PacketHeader* packetheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete packetheader_;
  }
  if (packetheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      packetheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packetheader, submessage_arena);
    }
    
  } else {
    
  }
  packetheader_ = packetheader;
  // @@protoc_insertion_point(field_set_allocated:GameStartRequestPacket.packetHeader)
}

// -------------------------------------------------------------------

// GameStartResultPacket

// .PacketHeader packetHeader = 1;
inline bool GameStartResultPacket::has_packetheader() const {
  return this != internal_default_instance() && packetheader_ != nullptr;
}
inline void GameStartResultPacket::clear_packetheader() {
  if (GetArenaNoVirtual() == nullptr && packetheader_ != nullptr) {
    delete packetheader_;
  }
  packetheader_ = nullptr;
}
inline const ::PacketHeader& GameStartResultPacket::packetheader() const {
  const ::PacketHeader* p = packetheader_;
  // @@protoc_insertion_point(field_get:GameStartResultPacket.packetHeader)
  return p != nullptr ? *p : *reinterpret_cast<const ::PacketHeader*>(
      &::_PacketHeader_default_instance_);
}
inline ::PacketHeader* GameStartResultPacket::release_packetheader() {
  // @@protoc_insertion_point(field_release:GameStartResultPacket.packetHeader)
  
  ::PacketHeader* temp = packetheader_;
  packetheader_ = nullptr;
  return temp;
}
inline ::PacketHeader* GameStartResultPacket::mutable_packetheader() {
  
  if (packetheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::PacketHeader>(GetArenaNoVirtual());
    packetheader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GameStartResultPacket.packetHeader)
  return packetheader_;
}
inline void GameStartResultPacket::set_allocated_packetheader(::PacketHeader* packetheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete packetheader_;
  }
  if (packetheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      packetheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packetheader, submessage_arena);
    }
    
  } else {
    
  }
  packetheader_ = packetheader;
  // @@protoc_insertion_point(field_set_allocated:GameStartResultPacket.packetHeader)
}

// -------------------------------------------------------------------

// GameStartNotifyPacket

// .PacketHeader packetHeader = 1;
inline bool GameStartNotifyPacket::has_packetheader() const {
  return this != internal_default_instance() && packetheader_ != nullptr;
}
inline void GameStartNotifyPacket::clear_packetheader() {
  if (GetArenaNoVirtual() == nullptr && packetheader_ != nullptr) {
    delete packetheader_;
  }
  packetheader_ = nullptr;
}
inline const ::PacketHeader& GameStartNotifyPacket::packetheader() const {
  const ::PacketHeader* p = packetheader_;
  // @@protoc_insertion_point(field_get:GameStartNotifyPacket.packetHeader)
  return p != nullptr ? *p : *reinterpret_cast<const ::PacketHeader*>(
      &::_PacketHeader_default_instance_);
}
inline ::PacketHeader* GameStartNotifyPacket::release_packetheader() {
  // @@protoc_insertion_point(field_release:GameStartNotifyPacket.packetHeader)
  
  ::PacketHeader* temp = packetheader_;
  packetheader_ = nullptr;
  return temp;
}
inline ::PacketHeader* GameStartNotifyPacket::mutable_packetheader() {
  
  if (packetheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::PacketHeader>(GetArenaNoVirtual());
    packetheader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GameStartNotifyPacket.packetHeader)
  return packetheader_;
}
inline void GameStartNotifyPacket::set_allocated_packetheader(::PacketHeader* packetheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete packetheader_;
  }
  if (packetheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      packetheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packetheader, submessage_arena);
    }
    
  } else {
    
  }
  packetheader_ = packetheader;
  // @@protoc_insertion_point(field_set_allocated:GameStartNotifyPacket.packetHeader)
}

// int32 PlayerID = 2;
inline void GameStartNotifyPacket::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameStartNotifyPacket::playerid() const {
  // @@protoc_insertion_point(field_get:GameStartNotifyPacket.PlayerID)
  return playerid_;
}
inline void GameStartNotifyPacket::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GameStartNotifyPacket.PlayerID)
}

// -------------------------------------------------------------------

// ObjectEventRecord

// .ObjectEventRecord.EventType eventTypeCode = 1;
inline void ObjectEventRecord::clear_eventtypecode() {
  eventtypecode_ = 0;
}
inline ::ObjectEventRecord_EventType ObjectEventRecord::eventtypecode() const {
  // @@protoc_insertion_point(field_get:ObjectEventRecord.eventTypeCode)
  return static_cast< ::ObjectEventRecord_EventType >(eventtypecode_);
}
inline void ObjectEventRecord::set_eventtypecode(::ObjectEventRecord_EventType value) {
  
  eventtypecode_ = value;
  // @@protoc_insertion_point(field_set:ObjectEventRecord.eventTypeCode)
}

// float eventOccuredTime = 2;
inline void ObjectEventRecord::clear_eventoccuredtime() {
  eventoccuredtime_ = 0;
}
inline float ObjectEventRecord::eventoccuredtime() const {
  // @@protoc_insertion_point(field_get:ObjectEventRecord.eventOccuredTime)
  return eventoccuredtime_;
}
inline void ObjectEventRecord::set_eventoccuredtime(float value) {
  
  eventoccuredtime_ = value;
  // @@protoc_insertion_point(field_set:ObjectEventRecord.eventOccuredTime)
}

// -------------------------------------------------------------------

// GameSyncRequestPacket

// .PacketHeader packetHeader = 1;
inline bool GameSyncRequestPacket::has_packetheader() const {
  return this != internal_default_instance() && packetheader_ != nullptr;
}
inline void GameSyncRequestPacket::clear_packetheader() {
  if (GetArenaNoVirtual() == nullptr && packetheader_ != nullptr) {
    delete packetheader_;
  }
  packetheader_ = nullptr;
}
inline const ::PacketHeader& GameSyncRequestPacket::packetheader() const {
  const ::PacketHeader* p = packetheader_;
  // @@protoc_insertion_point(field_get:GameSyncRequestPacket.packetHeader)
  return p != nullptr ? *p : *reinterpret_cast<const ::PacketHeader*>(
      &::_PacketHeader_default_instance_);
}
inline ::PacketHeader* GameSyncRequestPacket::release_packetheader() {
  // @@protoc_insertion_point(field_release:GameSyncRequestPacket.packetHeader)
  
  ::PacketHeader* temp = packetheader_;
  packetheader_ = nullptr;
  return temp;
}
inline ::PacketHeader* GameSyncRequestPacket::mutable_packetheader() {
  
  if (packetheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::PacketHeader>(GetArenaNoVirtual());
    packetheader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:GameSyncRequestPacket.packetHeader)
  return packetheader_;
}
inline void GameSyncRequestPacket::set_allocated_packetheader(::PacketHeader* packetheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete packetheader_;
  }
  if (packetheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      packetheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packetheader, submessage_arena);
    }
    
  } else {
    
  }
  packetheader_ = packetheader;
  // @@protoc_insertion_point(field_set_allocated:GameSyncRequestPacket.packetHeader)
}

// int32 playerID = 2;
inline void GameSyncRequestPacket::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameSyncRequestPacket::playerid() const {
  // @@protoc_insertion_point(field_get:GameSyncRequestPacket.playerID)
  return playerid_;
}
inline void GameSyncRequestPacket::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:GameSyncRequestPacket.playerID)
}

// repeated .ObjectEventRecord eventRecordList = 4;
inline int GameSyncRequestPacket::eventrecordlist_size() const {
  return eventrecordlist_.size();
}
inline void GameSyncRequestPacket::clear_eventrecordlist() {
  eventrecordlist_.Clear();
}
inline ::ObjectEventRecord* GameSyncRequestPacket::mutable_eventrecordlist(int index) {
  // @@protoc_insertion_point(field_mutable:GameSyncRequestPacket.eventRecordList)
  return eventrecordlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectEventRecord >*
GameSyncRequestPacket::mutable_eventrecordlist() {
  // @@protoc_insertion_point(field_mutable_list:GameSyncRequestPacket.eventRecordList)
  return &eventrecordlist_;
}
inline const ::ObjectEventRecord& GameSyncRequestPacket::eventrecordlist(int index) const {
  // @@protoc_insertion_point(field_get:GameSyncRequestPacket.eventRecordList)
  return eventrecordlist_.Get(index);
}
inline ::ObjectEventRecord* GameSyncRequestPacket::add_eventrecordlist() {
  // @@protoc_insertion_point(field_add:GameSyncRequestPacket.eventRecordList)
  return eventrecordlist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectEventRecord >&
GameSyncRequestPacket::eventrecordlist() const {
  // @@protoc_insertion_point(field_list:GameSyncRequestPacket.eventRecordList)
  return eventrecordlist_;
}

// -------------------------------------------------------------------

// ObjectSyncData

// int32 objectID = 1;
inline void ObjectSyncData::clear_objectid() {
  objectid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectSyncData::objectid() const {
  // @@protoc_insertion_point(field_get:ObjectSyncData.objectID)
  return objectid_;
}
inline void ObjectSyncData::set_objectid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  objectid_ = value;
  // @@protoc_insertion_point(field_set:ObjectSyncData.objectID)
}

// float xPos = 2;
inline void ObjectSyncData::clear_xpos() {
  xpos_ = 0;
}
inline float ObjectSyncData::xpos() const {
  // @@protoc_insertion_point(field_get:ObjectSyncData.xPos)
  return xpos_;
}
inline void ObjectSyncData::set_xpos(float value) {
  
  xpos_ = value;
  // @@protoc_insertion_point(field_set:ObjectSyncData.xPos)
}

// float yPos = 3;
inline void ObjectSyncData::clear_ypos() {
  ypos_ = 0;
}
inline float ObjectSyncData::ypos() const {
  // @@protoc_insertion_point(field_get:ObjectSyncData.yPos)
  return ypos_;
}
inline void ObjectSyncData::set_ypos(float value) {
  
  ypos_ = value;
  // @@protoc_insertion_point(field_set:ObjectSyncData.yPos)
}

// repeated .ObjectEventRecord eventRecordList = 4;
inline int ObjectSyncData::eventrecordlist_size() const {
  return eventrecordlist_.size();
}
inline void ObjectSyncData::clear_eventrecordlist() {
  eventrecordlist_.Clear();
}
inline ::ObjectEventRecord* ObjectSyncData::mutable_eventrecordlist(int index) {
  // @@protoc_insertion_point(field_mutable:ObjectSyncData.eventRecordList)
  return eventrecordlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectEventRecord >*
ObjectSyncData::mutable_eventrecordlist() {
  // @@protoc_insertion_point(field_mutable_list:ObjectSyncData.eventRecordList)
  return &eventrecordlist_;
}
inline const ::ObjectEventRecord& ObjectSyncData::eventrecordlist(int index) const {
  // @@protoc_insertion_point(field_get:ObjectSyncData.eventRecordList)
  return eventrecordlist_.Get(index);
}
inline ::ObjectEventRecord* ObjectSyncData::add_eventrecordlist() {
  // @@protoc_insertion_point(field_add:ObjectSyncData.eventRecordList)
  return eventrecordlist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectEventRecord >&
ObjectSyncData::eventrecordlist() const {
  // @@protoc_insertion_point(field_list:ObjectSyncData.eventRecordList)
  return eventrecordlist_;
}

// -------------------------------------------------------------------

// WorldSyncPacket

// .PacketHeader packetHeader = 1;
inline bool WorldSyncPacket::has_packetheader() const {
  return this != internal_default_instance() && packetheader_ != nullptr;
}
inline void WorldSyncPacket::clear_packetheader() {
  if (GetArenaNoVirtual() == nullptr && packetheader_ != nullptr) {
    delete packetheader_;
  }
  packetheader_ = nullptr;
}
inline const ::PacketHeader& WorldSyncPacket::packetheader() const {
  const ::PacketHeader* p = packetheader_;
  // @@protoc_insertion_point(field_get:WorldSyncPacket.packetHeader)
  return p != nullptr ? *p : *reinterpret_cast<const ::PacketHeader*>(
      &::_PacketHeader_default_instance_);
}
inline ::PacketHeader* WorldSyncPacket::release_packetheader() {
  // @@protoc_insertion_point(field_release:WorldSyncPacket.packetHeader)
  
  ::PacketHeader* temp = packetheader_;
  packetheader_ = nullptr;
  return temp;
}
inline ::PacketHeader* WorldSyncPacket::mutable_packetheader() {
  
  if (packetheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::PacketHeader>(GetArenaNoVirtual());
    packetheader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:WorldSyncPacket.packetHeader)
  return packetheader_;
}
inline void WorldSyncPacket::set_allocated_packetheader(::PacketHeader* packetheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete packetheader_;
  }
  if (packetheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      packetheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packetheader, submessage_arena);
    }
    
  } else {
    
  }
  packetheader_ = packetheader;
  // @@protoc_insertion_point(field_set_allocated:WorldSyncPacket.packetHeader)
}

// repeated .ObjectSyncData objSyncDataList = 2;
inline int WorldSyncPacket::objsyncdatalist_size() const {
  return objsyncdatalist_.size();
}
inline void WorldSyncPacket::clear_objsyncdatalist() {
  objsyncdatalist_.Clear();
}
inline ::ObjectSyncData* WorldSyncPacket::mutable_objsyncdatalist(int index) {
  // @@protoc_insertion_point(field_mutable:WorldSyncPacket.objSyncDataList)
  return objsyncdatalist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectSyncData >*
WorldSyncPacket::mutable_objsyncdatalist() {
  // @@protoc_insertion_point(field_mutable_list:WorldSyncPacket.objSyncDataList)
  return &objsyncdatalist_;
}
inline const ::ObjectSyncData& WorldSyncPacket::objsyncdatalist(int index) const {
  // @@protoc_insertion_point(field_get:WorldSyncPacket.objSyncDataList)
  return objsyncdatalist_.Get(index);
}
inline ::ObjectSyncData* WorldSyncPacket::add_objsyncdatalist() {
  // @@protoc_insertion_point(field_add:WorldSyncPacket.objSyncDataList)
  return objsyncdatalist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ObjectSyncData >&
WorldSyncPacket::objsyncdatalist() const {
  // @@protoc_insertion_point(field_list:WorldSyncPacket.objSyncDataList)
  return objsyncdatalist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ObjectEventRecord_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ObjectEventRecord_EventType>() {
  return ::ObjectEventRecord_EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PacketDefine_2eproto
