// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketDefine.proto

#include "PacketDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_PacketDefine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectEventRecord_PacketDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PacketDefine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectSyncData_PacketDefine_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_PacketDefine_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PacketHeader_PacketDefine_2eproto;
class PacketHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PacketHeader> _instance;
} _PacketHeader_default_instance_;
class GameStartRequestPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameStartRequestPacket> _instance;
} _GameStartRequestPacket_default_instance_;
class GameStartResultPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameStartResultPacket> _instance;
} _GameStartResultPacket_default_instance_;
class GameStartNotifyPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameStartNotifyPacket> _instance;
} _GameStartNotifyPacket_default_instance_;
class ObjectEventRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectEventRecord> _instance;
} _ObjectEventRecord_default_instance_;
class GameSyncRequestPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameSyncRequestPacket> _instance;
} _GameSyncRequestPacket_default_instance_;
class ObjectSyncDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectSyncData> _instance;
} _ObjectSyncData_default_instance_;
class WorldSyncPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldSyncPacket> _instance;
} _WorldSyncPacket_default_instance_;
static void InitDefaultsscc_info_GameStartNotifyPacket_PacketDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameStartNotifyPacket_default_instance_;
    new (ptr) ::GameStartNotifyPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameStartNotifyPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameStartNotifyPacket_PacketDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GameStartNotifyPacket_PacketDefine_2eproto}, {
      &scc_info_PacketHeader_PacketDefine_2eproto.base,}};

static void InitDefaultsscc_info_GameStartRequestPacket_PacketDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameStartRequestPacket_default_instance_;
    new (ptr) ::GameStartRequestPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameStartRequestPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameStartRequestPacket_PacketDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GameStartRequestPacket_PacketDefine_2eproto}, {
      &scc_info_PacketHeader_PacketDefine_2eproto.base,}};

static void InitDefaultsscc_info_GameStartResultPacket_PacketDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameStartResultPacket_default_instance_;
    new (ptr) ::GameStartResultPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameStartResultPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GameStartResultPacket_PacketDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GameStartResultPacket_PacketDefine_2eproto}, {
      &scc_info_PacketHeader_PacketDefine_2eproto.base,}};

static void InitDefaultsscc_info_GameSyncRequestPacket_PacketDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameSyncRequestPacket_default_instance_;
    new (ptr) ::GameSyncRequestPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameSyncRequestPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GameSyncRequestPacket_PacketDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GameSyncRequestPacket_PacketDefine_2eproto}, {
      &scc_info_PacketHeader_PacketDefine_2eproto.base,
      &scc_info_ObjectEventRecord_PacketDefine_2eproto.base,}};

static void InitDefaultsscc_info_ObjectEventRecord_PacketDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ObjectEventRecord_default_instance_;
    new (ptr) ::ObjectEventRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ObjectEventRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectEventRecord_PacketDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ObjectEventRecord_PacketDefine_2eproto}, {}};

static void InitDefaultsscc_info_ObjectSyncData_PacketDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ObjectSyncData_default_instance_;
    new (ptr) ::ObjectSyncData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ObjectSyncData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectSyncData_PacketDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ObjectSyncData_PacketDefine_2eproto}, {
      &scc_info_ObjectEventRecord_PacketDefine_2eproto.base,}};

static void InitDefaultsscc_info_PacketHeader_PacketDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PacketHeader_default_instance_;
    new (ptr) ::PacketHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PacketHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PacketHeader_PacketDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PacketHeader_PacketDefine_2eproto}, {}};

static void InitDefaultsscc_info_WorldSyncPacket_PacketDefine_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WorldSyncPacket_default_instance_;
    new (ptr) ::WorldSyncPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WorldSyncPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorldSyncPacket_PacketDefine_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_WorldSyncPacket_PacketDefine_2eproto}, {
      &scc_info_PacketHeader_PacketDefine_2eproto.base,
      &scc_info_ObjectSyncData_PacketDefine_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_PacketDefine_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_PacketDefine_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_PacketDefine_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_PacketDefine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PacketHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PacketHeader, packetid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameStartRequestPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameStartRequestPacket, packetheader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameStartResultPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameStartResultPacket, packetheader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameStartNotifyPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameStartNotifyPacket, packetheader_),
  PROTOBUF_FIELD_OFFSET(::GameStartNotifyPacket, playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ObjectEventRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ObjectEventRecord, eventtypecode_),
  PROTOBUF_FIELD_OFFSET(::ObjectEventRecord, eventoccuredtime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GameSyncRequestPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GameSyncRequestPacket, packetheader_),
  PROTOBUF_FIELD_OFFSET(::GameSyncRequestPacket, playerid_),
  PROTOBUF_FIELD_OFFSET(::GameSyncRequestPacket, eventrecordlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ObjectSyncData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ObjectSyncData, objectid_),
  PROTOBUF_FIELD_OFFSET(::ObjectSyncData, xpos_),
  PROTOBUF_FIELD_OFFSET(::ObjectSyncData, ypos_),
  PROTOBUF_FIELD_OFFSET(::ObjectSyncData, eventrecordlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorldSyncPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WorldSyncPacket, packetheader_),
  PROTOBUF_FIELD_OFFSET(::WorldSyncPacket, objsyncdatalist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PacketHeader)},
  { 6, -1, sizeof(::GameStartRequestPacket)},
  { 12, -1, sizeof(::GameStartResultPacket)},
  { 18, -1, sizeof(::GameStartNotifyPacket)},
  { 25, -1, sizeof(::ObjectEventRecord)},
  { 32, -1, sizeof(::GameSyncRequestPacket)},
  { 40, -1, sizeof(::ObjectSyncData)},
  { 49, -1, sizeof(::WorldSyncPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PacketHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameStartRequestPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameStartResultPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameStartNotifyPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ObjectEventRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GameSyncRequestPacket_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ObjectSyncData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorldSyncPacket_default_instance_),
};

const char descriptor_table_protodef_PacketDefine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022PacketDefine.proto\" \n\014PacketHeader\022\020\n\010"
  "packetID\030\001 \001(\005\"=\n\026GameStartRequestPacket"
  "\022#\n\014packetHeader\030\001 \001(\0132\r.PacketHeader\"<\n"
  "\025GameStartResultPacket\022#\n\014packetHeader\030\001"
  " \001(\0132\r.PacketHeader\"N\n\025GameStartNotifyPa"
  "cket\022#\n\014packetHeader\030\001 \001(\0132\r.PacketHeade"
  "r\022\020\n\010PlayerID\030\002 \001(\005\"\321\001\n\021ObjectEventRecor"
  "d\0223\n\reventTypeCode\030\001 \001(\0162\034.ObjectEventRe"
  "cord.EventType\022\030\n\020eventOccuredTime\030\002 \001(\002"
  "\"m\n\tEventType\022\013\n\007Move_UP\020\000\022\r\n\tMove_Down\020"
  "\001\022\r\n\tMove_Left\020\002\022\016\n\nMove_Right\020\003\022\007\n\003Die\020"
  "\004\022\016\n\nFireAttack\020\005\022\014\n\010Captured\020\006\"{\n\025GameS"
  "yncRequestPacket\022#\n\014packetHeader\030\001 \001(\0132\r"
  ".PacketHeader\022\020\n\010playerID\030\002 \001(\005\022+\n\017event"
  "RecordList\030\004 \003(\0132\022.ObjectEventRecord\"k\n\016"
  "ObjectSyncData\022\020\n\010objectID\030\001 \001(\005\022\014\n\004xPos"
  "\030\002 \001(\002\022\014\n\004yPos\030\003 \001(\002\022+\n\017eventRecordList\030"
  "\004 \003(\0132\022.ObjectEventRecord\"`\n\017WorldSyncPa"
  "cket\022#\n\014packetHeader\030\001 \001(\0132\r.PacketHeade"
  "r\022(\n\017objSyncDataList\030\002 \003(\0132\017.ObjectSyncD"
  "atab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_PacketDefine_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_PacketDefine_2eproto_sccs[8] = {
  &scc_info_GameStartNotifyPacket_PacketDefine_2eproto.base,
  &scc_info_GameStartRequestPacket_PacketDefine_2eproto.base,
  &scc_info_GameStartResultPacket_PacketDefine_2eproto.base,
  &scc_info_GameSyncRequestPacket_PacketDefine_2eproto.base,
  &scc_info_ObjectEventRecord_PacketDefine_2eproto.base,
  &scc_info_ObjectSyncData_PacketDefine_2eproto.base,
  &scc_info_PacketHeader_PacketDefine_2eproto.base,
  &scc_info_WorldSyncPacket_PacketDefine_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_PacketDefine_2eproto_once;
static bool descriptor_table_PacketDefine_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PacketDefine_2eproto = {
  &descriptor_table_PacketDefine_2eproto_initialized, descriptor_table_protodef_PacketDefine_2eproto, "PacketDefine.proto", 811,
  &descriptor_table_PacketDefine_2eproto_once, descriptor_table_PacketDefine_2eproto_sccs, descriptor_table_PacketDefine_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_PacketDefine_2eproto::offsets,
  file_level_metadata_PacketDefine_2eproto, 8, file_level_enum_descriptors_PacketDefine_2eproto, file_level_service_descriptors_PacketDefine_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_PacketDefine_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_PacketDefine_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectEventRecord_EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_PacketDefine_2eproto);
  return file_level_enum_descriptors_PacketDefine_2eproto[0];
}
bool ObjectEventRecord_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObjectEventRecord_EventType ObjectEventRecord::Move_UP;
constexpr ObjectEventRecord_EventType ObjectEventRecord::Move_Down;
constexpr ObjectEventRecord_EventType ObjectEventRecord::Move_Left;
constexpr ObjectEventRecord_EventType ObjectEventRecord::Move_Right;
constexpr ObjectEventRecord_EventType ObjectEventRecord::Die;
constexpr ObjectEventRecord_EventType ObjectEventRecord::FireAttack;
constexpr ObjectEventRecord_EventType ObjectEventRecord::Captured;
constexpr ObjectEventRecord_EventType ObjectEventRecord::EventType_MIN;
constexpr ObjectEventRecord_EventType ObjectEventRecord::EventType_MAX;
constexpr int ObjectEventRecord::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PacketHeader::InitAsDefaultInstance() {
}
class PacketHeader::_Internal {
 public:
};

PacketHeader::PacketHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PacketHeader)
}
PacketHeader::PacketHeader(const PacketHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packetid_ = from.packetid_;
  // @@protoc_insertion_point(copy_constructor:PacketHeader)
}

void PacketHeader::SharedCtor() {
  packetid_ = 0;
}

PacketHeader::~PacketHeader() {
  // @@protoc_insertion_point(destructor:PacketHeader)
  SharedDtor();
}

void PacketHeader::SharedDtor() {
}

void PacketHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PacketHeader& PacketHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PacketHeader_PacketDefine_2eproto.base);
  return *internal_default_instance();
}


void PacketHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:PacketHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packetid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PacketHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 packetID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          packetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PacketHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:PacketHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 packetID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PacketHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PacketHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PacketHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PacketHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 packetID = 1;
  if (this->packetid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->packetid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PacketHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PacketHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 packetID = 1;
  if (this->packetid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->packetid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PacketHeader)
  return target;
}

size_t PacketHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PacketHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 packetID = 1;
  if (this->packetid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->packetid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PacketHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PacketHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PacketHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PacketHeader)
    MergeFrom(*source);
  }
}

void PacketHeader::MergeFrom(const PacketHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PacketHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.packetid() != 0) {
    set_packetid(from.packetid());
  }
}

void PacketHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PacketHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketHeader::CopyFrom(const PacketHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PacketHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketHeader::IsInitialized() const {
  return true;
}

void PacketHeader::InternalSwap(PacketHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(packetid_, other->packetid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameStartRequestPacket::InitAsDefaultInstance() {
  ::_GameStartRequestPacket_default_instance_._instance.get_mutable()->packetheader_ = const_cast< ::PacketHeader*>(
      ::PacketHeader::internal_default_instance());
}
class GameStartRequestPacket::_Internal {
 public:
  static const ::PacketHeader& packetheader(const GameStartRequestPacket* msg);
};

const ::PacketHeader&
GameStartRequestPacket::_Internal::packetheader(const GameStartRequestPacket* msg) {
  return *msg->packetheader_;
}
GameStartRequestPacket::GameStartRequestPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameStartRequestPacket)
}
GameStartRequestPacket::GameStartRequestPacket(const GameStartRequestPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_packetheader()) {
    packetheader_ = new ::PacketHeader(*from.packetheader_);
  } else {
    packetheader_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameStartRequestPacket)
}

void GameStartRequestPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameStartRequestPacket_PacketDefine_2eproto.base);
  packetheader_ = nullptr;
}

GameStartRequestPacket::~GameStartRequestPacket() {
  // @@protoc_insertion_point(destructor:GameStartRequestPacket)
  SharedDtor();
}

void GameStartRequestPacket::SharedDtor() {
  if (this != internal_default_instance()) delete packetheader_;
}

void GameStartRequestPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStartRequestPacket& GameStartRequestPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameStartRequestPacket_PacketDefine_2eproto.base);
  return *internal_default_instance();
}


void GameStartRequestPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartRequestPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && packetheader_ != nullptr) {
    delete packetheader_;
  }
  packetheader_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameStartRequestPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PacketHeader packetHeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_packetheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameStartRequestPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameStartRequestPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .PacketHeader packetHeader = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_packetheader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameStartRequestPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameStartRequestPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameStartRequestPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameStartRequestPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::packetheader(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameStartRequestPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStartRequestPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameStartRequestPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::packetheader(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameStartRequestPacket)
  return target;
}

size_t GameStartRequestPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartRequestPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *packetheader_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStartRequestPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameStartRequestPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStartRequestPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameStartRequestPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameStartRequestPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameStartRequestPacket)
    MergeFrom(*source);
  }
}

void GameStartRequestPacket::MergeFrom(const GameStartRequestPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameStartRequestPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_packetheader()) {
    mutable_packetheader()->::PacketHeader::MergeFrom(from.packetheader());
  }
}

void GameStartRequestPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameStartRequestPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartRequestPacket::CopyFrom(const GameStartRequestPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartRequestPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartRequestPacket::IsInitialized() const {
  return true;
}

void GameStartRequestPacket::InternalSwap(GameStartRequestPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(packetheader_, other->packetheader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStartRequestPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameStartResultPacket::InitAsDefaultInstance() {
  ::_GameStartResultPacket_default_instance_._instance.get_mutable()->packetheader_ = const_cast< ::PacketHeader*>(
      ::PacketHeader::internal_default_instance());
}
class GameStartResultPacket::_Internal {
 public:
  static const ::PacketHeader& packetheader(const GameStartResultPacket* msg);
};

const ::PacketHeader&
GameStartResultPacket::_Internal::packetheader(const GameStartResultPacket* msg) {
  return *msg->packetheader_;
}
GameStartResultPacket::GameStartResultPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameStartResultPacket)
}
GameStartResultPacket::GameStartResultPacket(const GameStartResultPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_packetheader()) {
    packetheader_ = new ::PacketHeader(*from.packetheader_);
  } else {
    packetheader_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GameStartResultPacket)
}

void GameStartResultPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameStartResultPacket_PacketDefine_2eproto.base);
  packetheader_ = nullptr;
}

GameStartResultPacket::~GameStartResultPacket() {
  // @@protoc_insertion_point(destructor:GameStartResultPacket)
  SharedDtor();
}

void GameStartResultPacket::SharedDtor() {
  if (this != internal_default_instance()) delete packetheader_;
}

void GameStartResultPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStartResultPacket& GameStartResultPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameStartResultPacket_PacketDefine_2eproto.base);
  return *internal_default_instance();
}


void GameStartResultPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartResultPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && packetheader_ != nullptr) {
    delete packetheader_;
  }
  packetheader_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameStartResultPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PacketHeader packetHeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_packetheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameStartResultPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameStartResultPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .PacketHeader packetHeader = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_packetheader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameStartResultPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameStartResultPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameStartResultPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameStartResultPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::packetheader(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameStartResultPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStartResultPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameStartResultPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::packetheader(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameStartResultPacket)
  return target;
}

size_t GameStartResultPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartResultPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *packetheader_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStartResultPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameStartResultPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStartResultPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameStartResultPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameStartResultPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameStartResultPacket)
    MergeFrom(*source);
  }
}

void GameStartResultPacket::MergeFrom(const GameStartResultPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameStartResultPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_packetheader()) {
    mutable_packetheader()->::PacketHeader::MergeFrom(from.packetheader());
  }
}

void GameStartResultPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameStartResultPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartResultPacket::CopyFrom(const GameStartResultPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartResultPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartResultPacket::IsInitialized() const {
  return true;
}

void GameStartResultPacket::InternalSwap(GameStartResultPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(packetheader_, other->packetheader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStartResultPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameStartNotifyPacket::InitAsDefaultInstance() {
  ::_GameStartNotifyPacket_default_instance_._instance.get_mutable()->packetheader_ = const_cast< ::PacketHeader*>(
      ::PacketHeader::internal_default_instance());
}
class GameStartNotifyPacket::_Internal {
 public:
  static const ::PacketHeader& packetheader(const GameStartNotifyPacket* msg);
};

const ::PacketHeader&
GameStartNotifyPacket::_Internal::packetheader(const GameStartNotifyPacket* msg) {
  return *msg->packetheader_;
}
GameStartNotifyPacket::GameStartNotifyPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameStartNotifyPacket)
}
GameStartNotifyPacket::GameStartNotifyPacket(const GameStartNotifyPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_packetheader()) {
    packetheader_ = new ::PacketHeader(*from.packetheader_);
  } else {
    packetheader_ = nullptr;
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:GameStartNotifyPacket)
}

void GameStartNotifyPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameStartNotifyPacket_PacketDefine_2eproto.base);
  ::memset(&packetheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&packetheader_)) + sizeof(playerid_));
}

GameStartNotifyPacket::~GameStartNotifyPacket() {
  // @@protoc_insertion_point(destructor:GameStartNotifyPacket)
  SharedDtor();
}

void GameStartNotifyPacket::SharedDtor() {
  if (this != internal_default_instance()) delete packetheader_;
}

void GameStartNotifyPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameStartNotifyPacket& GameStartNotifyPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameStartNotifyPacket_PacketDefine_2eproto.base);
  return *internal_default_instance();
}


void GameStartNotifyPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:GameStartNotifyPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && packetheader_ != nullptr) {
    delete packetheader_;
  }
  packetheader_ = nullptr;
  playerid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameStartNotifyPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PacketHeader packetHeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_packetheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 PlayerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameStartNotifyPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameStartNotifyPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .PacketHeader packetHeader = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_packetheader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PlayerID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameStartNotifyPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameStartNotifyPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameStartNotifyPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameStartNotifyPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::packetheader(this), output);
  }

  // int32 PlayerID = 2;
  if (this->playerid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameStartNotifyPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* GameStartNotifyPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameStartNotifyPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::packetheader(this), target);
  }

  // int32 PlayerID = 2;
  if (this->playerid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameStartNotifyPacket)
  return target;
}

size_t GameStartNotifyPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameStartNotifyPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *packetheader_);
  }

  // int32 PlayerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStartNotifyPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameStartNotifyPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStartNotifyPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameStartNotifyPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameStartNotifyPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameStartNotifyPacket)
    MergeFrom(*source);
  }
}

void GameStartNotifyPacket::MergeFrom(const GameStartNotifyPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameStartNotifyPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_packetheader()) {
    mutable_packetheader()->::PacketHeader::MergeFrom(from.packetheader());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void GameStartNotifyPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameStartNotifyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartNotifyPacket::CopyFrom(const GameStartNotifyPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameStartNotifyPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartNotifyPacket::IsInitialized() const {
  return true;
}

void GameStartNotifyPacket::InternalSwap(GameStartNotifyPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(packetheader_, other->packetheader_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameStartNotifyPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectEventRecord::InitAsDefaultInstance() {
}
class ObjectEventRecord::_Internal {
 public:
};

ObjectEventRecord::ObjectEventRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ObjectEventRecord)
}
ObjectEventRecord::ObjectEventRecord(const ObjectEventRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eventtypecode_, &from.eventtypecode_,
    static_cast<size_t>(reinterpret_cast<char*>(&eventoccuredtime_) -
    reinterpret_cast<char*>(&eventtypecode_)) + sizeof(eventoccuredtime_));
  // @@protoc_insertion_point(copy_constructor:ObjectEventRecord)
}

void ObjectEventRecord::SharedCtor() {
  ::memset(&eventtypecode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eventoccuredtime_) -
      reinterpret_cast<char*>(&eventtypecode_)) + sizeof(eventoccuredtime_));
}

ObjectEventRecord::~ObjectEventRecord() {
  // @@protoc_insertion_point(destructor:ObjectEventRecord)
  SharedDtor();
}

void ObjectEventRecord::SharedDtor() {
}

void ObjectEventRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectEventRecord& ObjectEventRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectEventRecord_PacketDefine_2eproto.base);
  return *internal_default_instance();
}


void ObjectEventRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ObjectEventRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&eventtypecode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eventoccuredtime_) -
      reinterpret_cast<char*>(&eventtypecode_)) + sizeof(eventoccuredtime_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectEventRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ObjectEventRecord.EventType eventTypeCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_eventtypecode(static_cast<::ObjectEventRecord_EventType>(val));
        } else goto handle_unusual;
        continue;
      // float eventOccuredTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          eventoccuredtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectEventRecord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ObjectEventRecord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ObjectEventRecord.EventType eventTypeCode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eventtypecode(static_cast< ::ObjectEventRecord_EventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float eventOccuredTime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eventoccuredtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ObjectEventRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ObjectEventRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectEventRecord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ObjectEventRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ObjectEventRecord.EventType eventTypeCode = 1;
  if (this->eventtypecode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->eventtypecode(), output);
  }

  // float eventOccuredTime = 2;
  if (!(this->eventoccuredtime() <= 0 && this->eventoccuredtime() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->eventoccuredtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ObjectEventRecord)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectEventRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObjectEventRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ObjectEventRecord.EventType eventTypeCode = 1;
  if (this->eventtypecode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->eventtypecode(), target);
  }

  // float eventOccuredTime = 2;
  if (!(this->eventoccuredtime() <= 0 && this->eventoccuredtime() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->eventoccuredtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObjectEventRecord)
  return target;
}

size_t ObjectEventRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ObjectEventRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ObjectEventRecord.EventType eventTypeCode = 1;
  if (this->eventtypecode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->eventtypecode());
  }

  // float eventOccuredTime = 2;
  if (!(this->eventoccuredtime() <= 0 && this->eventoccuredtime() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectEventRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ObjectEventRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectEventRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectEventRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ObjectEventRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ObjectEventRecord)
    MergeFrom(*source);
  }
}

void ObjectEventRecord::MergeFrom(const ObjectEventRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ObjectEventRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.eventtypecode() != 0) {
    set_eventtypecode(from.eventtypecode());
  }
  if (!(from.eventoccuredtime() <= 0 && from.eventoccuredtime() >= 0)) {
    set_eventoccuredtime(from.eventoccuredtime());
  }
}

void ObjectEventRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ObjectEventRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectEventRecord::CopyFrom(const ObjectEventRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ObjectEventRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectEventRecord::IsInitialized() const {
  return true;
}

void ObjectEventRecord::InternalSwap(ObjectEventRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(eventtypecode_, other->eventtypecode_);
  swap(eventoccuredtime_, other->eventoccuredtime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectEventRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameSyncRequestPacket::InitAsDefaultInstance() {
  ::_GameSyncRequestPacket_default_instance_._instance.get_mutable()->packetheader_ = const_cast< ::PacketHeader*>(
      ::PacketHeader::internal_default_instance());
}
class GameSyncRequestPacket::_Internal {
 public:
  static const ::PacketHeader& packetheader(const GameSyncRequestPacket* msg);
};

const ::PacketHeader&
GameSyncRequestPacket::_Internal::packetheader(const GameSyncRequestPacket* msg) {
  return *msg->packetheader_;
}
GameSyncRequestPacket::GameSyncRequestPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameSyncRequestPacket)
}
GameSyncRequestPacket::GameSyncRequestPacket(const GameSyncRequestPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      eventrecordlist_(from.eventrecordlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_packetheader()) {
    packetheader_ = new ::PacketHeader(*from.packetheader_);
  } else {
    packetheader_ = nullptr;
  }
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:GameSyncRequestPacket)
}

void GameSyncRequestPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GameSyncRequestPacket_PacketDefine_2eproto.base);
  ::memset(&packetheader_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&playerid_) -
      reinterpret_cast<char*>(&packetheader_)) + sizeof(playerid_));
}

GameSyncRequestPacket::~GameSyncRequestPacket() {
  // @@protoc_insertion_point(destructor:GameSyncRequestPacket)
  SharedDtor();
}

void GameSyncRequestPacket::SharedDtor() {
  if (this != internal_default_instance()) delete packetheader_;
}

void GameSyncRequestPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameSyncRequestPacket& GameSyncRequestPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameSyncRequestPacket_PacketDefine_2eproto.base);
  return *internal_default_instance();
}


void GameSyncRequestPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:GameSyncRequestPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventrecordlist_.Clear();
  if (GetArenaNoVirtual() == nullptr && packetheader_ != nullptr) {
    delete packetheader_;
  }
  packetheader_ = nullptr;
  playerid_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GameSyncRequestPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PacketHeader packetHeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_packetheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 playerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ObjectEventRecord eventRecordList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_eventrecordlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GameSyncRequestPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameSyncRequestPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .PacketHeader packetHeader = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_packetheader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playerID = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ObjectEventRecord eventRecordList = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_eventrecordlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameSyncRequestPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameSyncRequestPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GameSyncRequestPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameSyncRequestPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::packetheader(this), output);
  }

  // int32 playerID = 2;
  if (this->playerid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->playerid(), output);
  }

  // repeated .ObjectEventRecord eventRecordList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->eventrecordlist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->eventrecordlist(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GameSyncRequestPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* GameSyncRequestPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameSyncRequestPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::packetheader(this), target);
  }

  // int32 playerID = 2;
  if (this->playerid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->playerid(), target);
  }

  // repeated .ObjectEventRecord eventRecordList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->eventrecordlist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->eventrecordlist(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameSyncRequestPacket)
  return target;
}

size_t GameSyncRequestPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameSyncRequestPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ObjectEventRecord eventRecordList = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->eventrecordlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->eventrecordlist(static_cast<int>(i)));
    }
  }

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *packetheader_);
  }

  // int32 playerID = 2;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameSyncRequestPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameSyncRequestPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const GameSyncRequestPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameSyncRequestPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameSyncRequestPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameSyncRequestPacket)
    MergeFrom(*source);
  }
}

void GameSyncRequestPacket::MergeFrom(const GameSyncRequestPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameSyncRequestPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  eventrecordlist_.MergeFrom(from.eventrecordlist_);
  if (from.has_packetheader()) {
    mutable_packetheader()->::PacketHeader::MergeFrom(from.packetheader());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void GameSyncRequestPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameSyncRequestPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSyncRequestPacket::CopyFrom(const GameSyncRequestPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameSyncRequestPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSyncRequestPacket::IsInitialized() const {
  return true;
}

void GameSyncRequestPacket::InternalSwap(GameSyncRequestPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&eventrecordlist_)->InternalSwap(CastToBase(&other->eventrecordlist_));
  swap(packetheader_, other->packetheader_);
  swap(playerid_, other->playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameSyncRequestPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectSyncData::InitAsDefaultInstance() {
}
class ObjectSyncData::_Internal {
 public:
};

ObjectSyncData::ObjectSyncData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ObjectSyncData)
}
ObjectSyncData::ObjectSyncData(const ObjectSyncData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      eventrecordlist_(from.eventrecordlist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&objectid_, &from.objectid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ypos_) -
    reinterpret_cast<char*>(&objectid_)) + sizeof(ypos_));
  // @@protoc_insertion_point(copy_constructor:ObjectSyncData)
}

void ObjectSyncData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectSyncData_PacketDefine_2eproto.base);
  ::memset(&objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ypos_) -
      reinterpret_cast<char*>(&objectid_)) + sizeof(ypos_));
}

ObjectSyncData::~ObjectSyncData() {
  // @@protoc_insertion_point(destructor:ObjectSyncData)
  SharedDtor();
}

void ObjectSyncData::SharedDtor() {
}

void ObjectSyncData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectSyncData& ObjectSyncData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectSyncData_PacketDefine_2eproto.base);
  return *internal_default_instance();
}


void ObjectSyncData::Clear() {
// @@protoc_insertion_point(message_clear_start:ObjectSyncData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventrecordlist_.Clear();
  ::memset(&objectid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ypos_) -
      reinterpret_cast<char*>(&objectid_)) + sizeof(ypos_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectSyncData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 objectID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          objectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float xPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          xpos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ypos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .ObjectEventRecord eventRecordList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_eventrecordlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectSyncData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ObjectSyncData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 objectID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float xPos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xpos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yPos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ypos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ObjectEventRecord eventRecordList = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_eventrecordlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ObjectSyncData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ObjectSyncData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectSyncData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ObjectSyncData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectID = 1;
  if (this->objectid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->objectid(), output);
  }

  // float xPos = 2;
  if (!(this->xpos() <= 0 && this->xpos() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->xpos(), output);
  }

  // float yPos = 3;
  if (!(this->ypos() <= 0 && this->ypos() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->ypos(), output);
  }

  // repeated .ObjectEventRecord eventRecordList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->eventrecordlist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->eventrecordlist(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ObjectSyncData)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectSyncData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObjectSyncData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 objectID = 1;
  if (this->objectid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->objectid(), target);
  }

  // float xPos = 2;
  if (!(this->xpos() <= 0 && this->xpos() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->xpos(), target);
  }

  // float yPos = 3;
  if (!(this->ypos() <= 0 && this->ypos() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->ypos(), target);
  }

  // repeated .ObjectEventRecord eventRecordList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->eventrecordlist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->eventrecordlist(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObjectSyncData)
  return target;
}

size_t ObjectSyncData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ObjectSyncData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ObjectEventRecord eventRecordList = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->eventrecordlist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->eventrecordlist(static_cast<int>(i)));
    }
  }

  // int32 objectID = 1;
  if (this->objectid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->objectid());
  }

  // float xPos = 2;
  if (!(this->xpos() <= 0 && this->xpos() >= 0)) {
    total_size += 1 + 4;
  }

  // float yPos = 3;
  if (!(this->ypos() <= 0 && this->ypos() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectSyncData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ObjectSyncData)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectSyncData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectSyncData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ObjectSyncData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ObjectSyncData)
    MergeFrom(*source);
  }
}

void ObjectSyncData::MergeFrom(const ObjectSyncData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ObjectSyncData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  eventrecordlist_.MergeFrom(from.eventrecordlist_);
  if (from.objectid() != 0) {
    set_objectid(from.objectid());
  }
  if (!(from.xpos() <= 0 && from.xpos() >= 0)) {
    set_xpos(from.xpos());
  }
  if (!(from.ypos() <= 0 && from.ypos() >= 0)) {
    set_ypos(from.ypos());
  }
}

void ObjectSyncData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ObjectSyncData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectSyncData::CopyFrom(const ObjectSyncData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ObjectSyncData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectSyncData::IsInitialized() const {
  return true;
}

void ObjectSyncData::InternalSwap(ObjectSyncData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&eventrecordlist_)->InternalSwap(CastToBase(&other->eventrecordlist_));
  swap(objectid_, other->objectid_);
  swap(xpos_, other->xpos_);
  swap(ypos_, other->ypos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectSyncData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorldSyncPacket::InitAsDefaultInstance() {
  ::_WorldSyncPacket_default_instance_._instance.get_mutable()->packetheader_ = const_cast< ::PacketHeader*>(
      ::PacketHeader::internal_default_instance());
}
class WorldSyncPacket::_Internal {
 public:
  static const ::PacketHeader& packetheader(const WorldSyncPacket* msg);
};

const ::PacketHeader&
WorldSyncPacket::_Internal::packetheader(const WorldSyncPacket* msg) {
  return *msg->packetheader_;
}
WorldSyncPacket::WorldSyncPacket()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorldSyncPacket)
}
WorldSyncPacket::WorldSyncPacket(const WorldSyncPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      objsyncdatalist_(from.objsyncdatalist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_packetheader()) {
    packetheader_ = new ::PacketHeader(*from.packetheader_);
  } else {
    packetheader_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:WorldSyncPacket)
}

void WorldSyncPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldSyncPacket_PacketDefine_2eproto.base);
  packetheader_ = nullptr;
}

WorldSyncPacket::~WorldSyncPacket() {
  // @@protoc_insertion_point(destructor:WorldSyncPacket)
  SharedDtor();
}

void WorldSyncPacket::SharedDtor() {
  if (this != internal_default_instance()) delete packetheader_;
}

void WorldSyncPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldSyncPacket& WorldSyncPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldSyncPacket_PacketDefine_2eproto.base);
  return *internal_default_instance();
}


void WorldSyncPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:WorldSyncPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objsyncdatalist_.Clear();
  if (GetArenaNoVirtual() == nullptr && packetheader_ != nullptr) {
    delete packetheader_;
  }
  packetheader_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WorldSyncPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .PacketHeader packetHeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_packetheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ObjectSyncData objSyncDataList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_objsyncdatalist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WorldSyncPacket::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:WorldSyncPacket)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .PacketHeader packetHeader = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_packetheader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ObjectSyncData objSyncDataList = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_objsyncdatalist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WorldSyncPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WorldSyncPacket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WorldSyncPacket::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WorldSyncPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::packetheader(this), output);
  }

  // repeated .ObjectSyncData objSyncDataList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objsyncdatalist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->objsyncdatalist(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:WorldSyncPacket)
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldSyncPacket::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldSyncPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::packetheader(this), target);
  }

  // repeated .ObjectSyncData objSyncDataList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objsyncdatalist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->objsyncdatalist(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldSyncPacket)
  return target;
}

size_t WorldSyncPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorldSyncPacket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ObjectSyncData objSyncDataList = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->objsyncdatalist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->objsyncdatalist(static_cast<int>(i)));
    }
  }

  // .PacketHeader packetHeader = 1;
  if (this->has_packetheader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *packetheader_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldSyncPacket::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WorldSyncPacket)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldSyncPacket* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldSyncPacket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WorldSyncPacket)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WorldSyncPacket)
    MergeFrom(*source);
  }
}

void WorldSyncPacket::MergeFrom(const WorldSyncPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorldSyncPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objsyncdatalist_.MergeFrom(from.objsyncdatalist_);
  if (from.has_packetheader()) {
    mutable_packetheader()->::PacketHeader::MergeFrom(from.packetheader());
  }
}

void WorldSyncPacket::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WorldSyncPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldSyncPacket::CopyFrom(const WorldSyncPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorldSyncPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldSyncPacket::IsInitialized() const {
  return true;
}

void WorldSyncPacket::InternalSwap(WorldSyncPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&objsyncdatalist_)->InternalSwap(CastToBase(&other->objsyncdatalist_));
  swap(packetheader_, other->packetheader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldSyncPacket::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PacketHeader* Arena::CreateMaybeMessage< ::PacketHeader >(Arena* arena) {
  return Arena::CreateInternal< ::PacketHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::GameStartRequestPacket* Arena::CreateMaybeMessage< ::GameStartRequestPacket >(Arena* arena) {
  return Arena::CreateInternal< ::GameStartRequestPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::GameStartResultPacket* Arena::CreateMaybeMessage< ::GameStartResultPacket >(Arena* arena) {
  return Arena::CreateInternal< ::GameStartResultPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::GameStartNotifyPacket* Arena::CreateMaybeMessage< ::GameStartNotifyPacket >(Arena* arena) {
  return Arena::CreateInternal< ::GameStartNotifyPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::ObjectEventRecord* Arena::CreateMaybeMessage< ::ObjectEventRecord >(Arena* arena) {
  return Arena::CreateInternal< ::ObjectEventRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::GameSyncRequestPacket* Arena::CreateMaybeMessage< ::GameSyncRequestPacket >(Arena* arena) {
  return Arena::CreateInternal< ::GameSyncRequestPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::ObjectSyncData* Arena::CreateMaybeMessage< ::ObjectSyncData >(Arena* arena) {
  return Arena::CreateInternal< ::ObjectSyncData >(arena);
}
template<> PROTOBUF_NOINLINE ::WorldSyncPacket* Arena::CreateMaybeMessage< ::WorldSyncPacket >(Arena* arena) {
  return Arena::CreateInternal< ::WorldSyncPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
